// Code generated by Kitex v0.4.4. DO NOT EDIT.

package publishservice

import (
	"context"
	publish "doushengV4/kitex_gen/publish"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return publishServiceServiceInfo
}

var publishServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "PublishService"
	handlerType := (*publish.PublishService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FeedPublish":   kitex.NewMethodInfo(feedPublishHandler, newPublishServiceFeedPublishArgs, newPublishServiceFeedPublishResult, false),
		"ActionPublish": kitex.NewMethodInfo(actionPublishHandler, newPublishServiceActionPublishArgs, newPublishServiceActionPublishResult, false),
		"ListPublish":   kitex.NewMethodInfo(listPublishHandler, newPublishServiceListPublishArgs, newPublishServiceListPublishResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "publish",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func feedPublishHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServiceFeedPublishArgs)
	realResult := result.(*publish.PublishServiceFeedPublishResult)
	success, err := handler.(publish.PublishService).FeedPublish(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishServiceFeedPublishArgs() interface{} {
	return publish.NewPublishServiceFeedPublishArgs()
}

func newPublishServiceFeedPublishResult() interface{} {
	return publish.NewPublishServiceFeedPublishResult()
}

func actionPublishHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServiceActionPublishArgs)
	realResult := result.(*publish.PublishServiceActionPublishResult)
	success, err := handler.(publish.PublishService).ActionPublish(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishServiceActionPublishArgs() interface{} {
	return publish.NewPublishServiceActionPublishArgs()
}

func newPublishServiceActionPublishResult() interface{} {
	return publish.NewPublishServiceActionPublishResult()
}

func listPublishHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServiceListPublishArgs)
	realResult := result.(*publish.PublishServiceListPublishResult)
	success, err := handler.(publish.PublishService).ListPublish(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishServiceListPublishArgs() interface{} {
	return publish.NewPublishServiceListPublishArgs()
}

func newPublishServiceListPublishResult() interface{} {
	return publish.NewPublishServiceListPublishResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FeedPublish(ctx context.Context, req *publish.FeedRequest) (r *publish.FeedResponse, err error) {
	var _args publish.PublishServiceFeedPublishArgs
	_args.Req = req
	var _result publish.PublishServiceFeedPublishResult
	if err = p.c.Call(ctx, "FeedPublish", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ActionPublish(ctx context.Context, req *publish.ActionRequest) (r *publish.ActionResp, err error) {
	var _args publish.PublishServiceActionPublishArgs
	_args.Req = req
	var _result publish.PublishServiceActionPublishResult
	if err = p.c.Call(ctx, "ActionPublish", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListPublish(ctx context.Context, req *publish.ListRequest) (r *publish.ListResp, err error) {
	var _args publish.PublishServiceListPublishArgs
	_args.Req = req
	var _result publish.PublishServiceListPublishResult
	if err = p.c.Call(ctx, "ListPublish", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
